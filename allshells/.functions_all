if [ -n "$DOTFILES_DEBUG" ]; then
	if [ -n "$ZSH_VERSION" ]; then
		__source="${(%):-%x}"
	else
		__source="${BASH_SOURCE[0]}"
	fi
    echo "$(date) + $(whoami) + ${TERM} + executing $__source"
fi


## ############################################################################
## Here is my 'screen' section
## ############################################################################

# From linux dev box:
#     function sc() { screen -D -R -S $1 -t $1; }
function sc() { screen -R -S $1 -t $1; }
alias scl="screen -ls"

function sct() {
    screen -X sessionname $1
    STY=`echo $STY | cut -d "." -f 1`.$1
    screen -X title $1
}
alias sc1="sc task1"
alias sc2="sc task2"
alias sc3="sc task3"
alias sc4="sc task4"

## ############################################################################
## Text processing section
## ############################################################################
function reverse() {
	# see:  https://stackoverflow.com/questions/742466/how-can-i-reverse-the-order-of-lines-in-a-file

	# From: http://sed.sourceforge.net/sed1line.txt
	# # reverse order of lines (emulates "tac")
 	# # bug/feature in HHsed v1.5 causes blank lines to be deleted
 	# sed '1!G;h;$!d'               # method 1
 	# sed -n '1!G;h;$p'             # method 2

	# Other options...
	# awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'
	# perl -e 'print reverse <>'

	: # Empty statement to keep 'bash' happy when it is the shell
}
function juniq() {
	# This function is designed to remove duplicate lines, but still work with huge data
	#   see:
	#    https://unix.stackexchange.com/questions/194780/remove-duplicate-lines-while-keeping-the-order-of-the-lines
	#    https://unix.stackexchange.com/questions/131217/how-to-remove-duplicate-lines-with-awk-whilst-keeping-empty-lines
	#
	# Some simpler solutions exist:
	#	awk '!seen[$0]++'
	#   awk '!NF || !seen[$0]++'
	#   perl -ne 'print if ++$k{$_}==1'
	#

	# Regarding how to use this function...    I *wish* it could work with pipes, but could not figure it out.
	# see:  https://unix.stackexchange.com/questions/114121/how-to-compose-bash-functions-using-pipes
	if [ -n "$1" ]; then
		cat -n "$*" | sort -k2 -k1n  | uniq -f1 | sort -nk1,1 | cut -f2-
	else
		>&2 echo "Unable to run without providing a file argument (cannot be piped yet, try process substitution)"
	fi
}


## ############################################################################
## New section for NVM utility
## (there is also an 'section' for NVM in .exports_all)
## ############################################################################
#
# NOTE:  I wanted to put this here, so that my VIM-launched "sub-shells" (with
#        :!...) would have access to the NVM functions provided here.  HOWEVER,
#        it turns out that doing this slowed VIM launching by 30 WHOLE SECONDS!
#        I cannot yet explain why.  I tried:
#
#          1. Commenting out all plugins - trying to load, still 30s
#          2. Restoring plugins, commenting out EVERYTHING else - still 30s
#
#        So maybe I look into the shell script from NVM and see what it does.
#        Not at this time.
#
#        So I comment them out here, but leave them with this note saying why
#        they cannot be here (where I would prefer)
#
#[ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
#[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


## ############################################################################
## Python section (to mimic "enough" of the Windows `py` utility)
## ############################################################################
function py() {
    ver=$1
    # NOTE:  using the '&&' operator requires DOUBLE square bracketes
    if [[ -n $ver && $ver = -3 ]]; then
        python3 ${@:2}
    elif [[ -n $ver && $ver = -2 ]]; then
        python2 ${@:2}
    else
        # Assume un-specified - whatever comes first - python
        python ${@:1}
        # echo "Unrecognizable or unknown version spec provided: ${ver}"
    fi
}

function watcha() {
    #
    # NOTE:  assumes the alias is the last thing on the command line!
    #
    # Grab the alias definition into 'c'
    c=$(alias ${@: -1} | awk -F= '{print $2}' | sed 's/^.//' | sed 's/.$//')

    # Anything between `watcha` and the alias (last thing) are interpreted as
    # arguments to the GNU `watch` command, e.g. `-d`, `-w`, or `-n 4`

    # NOTE:  the spaces around the subtraction are REQUIRED for zshell to interpret
    #        as arithmetic and we do this expecting the ALIAS to be the LAST
    #        argument, and the preceding options just get passed right through
    echo watch ${@:1:$# - 1} $c
}

## ############################################################################
## Mounting/Unmounting helper functions
## ############################################################################

##
## These mounting functions use the Gnome FS commands - which
## create the mount points automatically in 'deep' and
## convoluted generated paths.
##
## Example aliases:
##
##     alias xxx-m="gvfs_mount <host> <share> <localdir>"
##     alias xxx-u="gvfs_umount <host> <share> <localdir>"
##
##     NOTE:  the links are created in here:  ~/smb/...
##
function gvfs_mount() {
    local srv=$1
    local share=$2
    local userdir=~/smb/$3
    local smbdir=/run/user/1000/gvfs/smb-share:server=${srv,,},share=${share,,}
	echo using 'gvfs' to mount //$srv/$share to $userdir
    gvfs-mount smb://$srv/$share
    while [ ! -d "$smbdir" ]
    do
        echo waiting for "$smbdir" to exist
        sleep 1
    done
    if [ ! -d ~/smb ]; then
        mkdir ~/smb
    fi
    sleep 2s
    ln -s "$smbdir" $userdir 
}

function gvfs_umount() {
    local srv=$1
    local share=$2
    local userdir=~/smb/$3
    local smbdir=/run/user/1000/gvfs/smb-share:server=${srv,,},share=${share,,}
    if [ -d $userdir ]; then
        rm $userdir
    fi
    gvfs-mount -u smb://$srv/$share
}

##
## These mounting functions use the CIFS file system commands
## (mount point folder:   must be ABSENT when mounting)
##
## Example aliases:
##
##     alias xxx-m="cifs_mount //<host>/<share> <localdir> <user>,<opts>"
##     alias xxx-u="cifs_umount <localdir>"
##
##          <opts> is typically "rw" or "ro" (for read-only)
##
function cifs_mount() {
	local remdir=$1
	local lcldir=$2
	local user=$3

	echo using 'cifs' to mount $remdir to $lcldir
	if [ -d $lcldir ]; then
		echo Local folder "$lcldir" already exists
		return
	fi
	mkdir $lcldir
	sudo mount.cifs $remdir $lcldir -vvv -o uid=$(whoami),suid,username=$user
	if [ $? != 0 ]; then
		rmdir $lcldir
	fi
}

function cifs_umount() {
	local lcldir=$1
	sudo umount $lcldir
	rmdir $lcldir
}

##
## These mounting functions use the SMBFS file system commands
## (mount point folder:   must be ABSENT when mounting)
##
## Example aliases:
##
##     alias xxx-m="smbfs_mount <host> <share> <localdir> <user>"
##     alias xxx-u="smbfs_umount <localdir>"
##
##          <opts> is typically "rw" or "ro" (for read-only)
##
function smbfs_mount() {
	local host=$1
	local share=$2
	local lcldir=$3
	local user=$4

	if [ -d $lcldir ]; then
		echo Local folder "$lcldir" already exists
		return
	fi
	if [ -z $user ]; then
		local user=$(whoami)
	fi
	echo using 'smbfs' to mount $share to $lcldir
	mkdir $lcldir
	mount_smbfs //$user@$host/$share $lcldir
	if [ $? != 0 ]; then
		rmdir $lcldir
	fi
}

function smbfs_umount() {
	local lcldir=$1
	# From error message, trying something else:
	#   umount(/...): Resource busy -- try 'diskutil unmount'
	#umount $lcldir
	diskutil unmount $lcldir
	rmdir $lcldir
}




## ############################################################################
## OS - specific values
## ############################################################################

# On MacOS, find ALWAYS has an error to report
if [ "${OSTYPE:0:6}" = "darwin" ]; then
	function mfind() { find "$@" 2>/dev/null; }
fi


## ############################################################################
## Pull in "local" or "private" values
## ############################################################################

if [ -f ~/.local/.functions ]; then
	source ~/.local/.functions
fi

