if [ -n "$DOTFILES_DEBUG" ]; then
	if [ -n "$ZSH_VERSION" ]; then
		__source="${(%):-%x}"
	else
		__source="${BASH_SOURCE[0]}"
	fi
    echo "$(date) + $(whoami) + ${TERM} + executing $__source"
fi


## ############################################################################
## Here is my 'screen' section
## ############################################################################

# From linux dev box:
#     function sc() { screen -D -R -S $1 -t $1; }
function sc() { screen -R -S $1 -t $1; }
alias scl="screen -ls"

function sct() {
    screen -X sessionname $1
    STY=`echo $STY | cut -d "." -f 1`.$1
    screen -X title $1
}
alias sc1="sc task1"
alias sc2="sc task2"
alias sc3="sc task3"
alias sc4="sc task4"

## ############################################################################
## Text processing section
## ############################################################################
function reverse() {
	# see:  https://stackoverflow.com/questions/742466/how-can-i-reverse-the-order-of-lines-in-a-file

	# From: http://sed.sourceforge.net/sed1line.txt
	# # reverse order of lines (emulates "tac")
 	# # bug/feature in HHsed v1.5 causes blank lines to be deleted
 	# sed '1!G;h;$!d'               # method 1
 	# sed -n '1!G;h;$p'             # method 2

	# Other options...
	# awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'
	# perl -e 'print reverse <>'

	: # Empty statement to keep 'bash' happy when it is the shell
}
function juniq() {
	# This function is designed to remove duplicate lines, but still work with huge data
	#   see:
	#    https://unix.stackexchange.com/questions/194780/remove-duplicate-lines-while-keeping-the-order-of-the-lines
	#    https://unix.stackexchange.com/questions/131217/how-to-remove-duplicate-lines-with-awk-whilst-keeping-empty-lines
	#
	# Some simpler solutions exist:
	#	awk '!seen[$0]++'
	#   awk '!NF || !seen[$0]++'
	#   perl -ne 'print if ++$k{$_}==1'
	#

	# Regarding how to use this function...    I *wish* it could work with pipes, but could not figure it out.
	# see:  https://unix.stackexchange.com/questions/114121/how-to-compose-bash-functions-using-pipes
	if [ -n "$1" ]; then
		cat -n "$*" | sort -k2 -k1n  | uniq -f1 | sort -nk1,1 | cut -f2-
	else
		>&2 echo "Unable to run without providing a file argument (cannot be piped yet, try process substitution)"
	fi
}


## ############################################################################
## Python section (to mimic "enough" of the Windows `py` utility)
## ############################################################################
function py() {
    ver=$1
    # NOTE:  using the '&&' operator requires DOUBLE square bracketes
    if [[ -n $ver && $ver = -3 ]]; then
        python3 ${@:2}
    elif [[ -n $ver && $ver = -2 ]]; then
        python2 ${@:2}
    else
        # Assume un-specified - whatever comes first - python
        python ${@:1}
        # echo "Unrecognizable or unknown version spec provided: ${ver}"
    fi
}


## ############################################################################
## OS - specific values
## ############################################################################

# On MacOS, find ALWAYS has an error to report
if [ "${OSTYPE:0:6}" = "darwin" ]; then
	function mfind() { find "$@" 2>/dev/null; }
fi


## ############################################################################
## Pull in "local" or "private" values
## ############################################################################

if [ -f ~/.local/.functions ]; then
	source ~/.local/.functions
fi

